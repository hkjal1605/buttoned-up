{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { googleSigninSuccess, googleSigninFailure, emailSigninSuccess, emailSigninFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  yield console.log(userAuth.email);\n  const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n  const userSnapshot = yield userRef.get();\n  yield put(googleSigninSuccess({\n    id: userSnapshot.id,\n    ...userSnapshot.data()\n  }));\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(googleSigninFailure(error));\n  }\n}\n;\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(emailSigninFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(emailSigninFailure(error));\n  }\n}\n;\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n}\n;\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    const user = yield auth.createUserWithEmailAndPassword(email, password);\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\n;\nexport function* signInOnSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield console.log(user, additionalData);\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* onGoogleSigninStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle);\n}\n;\nexport function* onEmailSigninStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail);\n}\n;\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\n;\nexport function* onSignOut() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\n;\nexport function* onSignUp() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\n;\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInOnSignUp);\n}\nexport function* userSaga() {\n  yield all([call(onGoogleSigninStart), call(onEmailSigninStart), call(onCheckUserSession), call(onSignOut), call(onSignUp), call(onSignUpSuccess)]);\n}\n;","map":{"version":3,"sources":["E:/MY_CODES/MY_WEB_DEV/buttoned-up/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","googleSigninSuccess","googleSigninFailure","emailSigninSuccess","emailSigninFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","auth","googleProvider","createUserProfileDocument","getCurrentUser","getSnapshotFromUserAuth","userAuth","additionalData","console","log","email","userRef","userSnapshot","get","id","data","signInWithGoogle","user","signInWithPopup","error","signInWithEmail","payload","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInOnSignUp","onGoogleSigninStart","GOOGLE_SIGNIN_START","onEmailSigninStart","EMAIL_SIGNIN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOut","SIGN_OUT_START","onSignUp","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSaga"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,kBAAnD,EAAuEC,kBAAvE,EAA2FC,cAA3F,EAA2GC,cAA3G,EAA2HC,aAA3H,EAA0IC,aAA1I,QAA+J,gBAA/J;AAEA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AAEA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4CC,cAA5C,EAA4D;AAC/D,QAAMC,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,KAArB,CAAN;AACA,QAAMC,OAAO,GAAG,MAAMpB,IAAI,CAACY,yBAAD,EAA4BG,QAA5B,EAAsCC,cAAtC,CAA1B;AACA,QAAMK,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,QAAMxB,GAAG,CAACI,mBAAmB,CAAC;AAAEqB,IAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,OAAGF,YAAY,CAACG,IAAb;AAA1B,GAAD,CAApB,CAAT;AACH;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAArB;AACA,UAAMG,uBAAuB,CAACY,IAAD,CAA7B;AACH,GAHD,CAGE,OAAME,KAAN,EAAa;AACX,UAAM9B,GAAG,CAACK,mBAAmB,CAACyB,KAAD,CAApB,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUC,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEX,IAAAA,KAAF;AAASY,IAAAA;AAAT;AAAX,CAA1B,EAA2D;AAC9D,MAAI;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMhB,IAAI,CAACsB,0BAAL,CAAgCb,KAAhC,EAAuCY,QAAvC,CAAvB;AACA,UAAMjB,uBAAuB,CAACY,IAAD,CAA7B;AACH,GAHD,CAGE,OAAME,KAAN,EAAa;AACX,UAAM9B,GAAG,CAACO,kBAAkB,CAACuB,KAAD,CAAnB,CAAT;AACH;AACJ;AAED,OAAO,UAAUK,mBAAV,GAAgC;AACnC,MAAG;AACC,UAAMlB,QAAQ,GAAG,MAAMF,cAAc,EAArC;AACA,QAAI,CAACE,QAAL,EAAe;AACf,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAJD,CAIE,OAAMa,KAAN,EAAa;AACX,UAAM9B,GAAG,CAACO,kBAAkB,CAACuB,KAAD,CAAnB,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUM,OAAV,GAAoB;AACvB,MAAI;AACA,UAAMxB,IAAI,CAACwB,OAAL,EAAN;AACA,UAAMpC,GAAG,CAACQ,cAAc,EAAf,CAAT;AACH,GAHD,CAGE,OAAMsB,KAAN,EAAa;AACX,UAAM9B,GAAG,CAACS,cAAc,CAACqB,KAAD,CAAf,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUO,MAAV,CAAiB;AAAEL,EAAAA,OAAO,EAAE;AAAEX,IAAAA,KAAF;AAASY,IAAAA,QAAT;AAAmBK,IAAAA;AAAnB;AAAX,CAAjB,EAA+D;AAClE,MAAI;AACA,UAAMV,IAAI,GAAG,MAAMhB,IAAI,CAAC2B,8BAAL,CAAoClB,KAApC,EAA2CY,QAA3C,CAAnB;AACA,UAAMjC,GAAG,CAACW,aAAa,CAAC;AAAEiB,MAAAA,IAAF;AAAQV,MAAAA,cAAc,EAAE;AAAEoB,QAAAA;AAAF;AAAxB,KAAD,CAAd,CAAT;AACH,GAHD,CAGE,OAAMR,KAAN,EAAa;AACX,UAAM9B,GAAG,CAACU,aAAa,CAACoB,KAAD,CAAd,CAAT;AACH;AACJ;AAAA;AAED,OAAO,UAAUU,cAAV,CAAyB;AAAER,EAAAA,OAAO,EAAE;AAAEJ,IAAAA,IAAF;AAAQV,IAAAA;AAAR;AAAX,CAAzB,EAA+D;AAClE,QAAMC,OAAO,CAACC,GAAR,CAAYQ,IAAZ,EAAkBV,cAAlB,CAAN;AACA,QAAMF,uBAAuB,CAACY,IAAD,EAAOV,cAAP,CAA7B;AACH;AAED,OAAO,UAAUuB,mBAAV,GAAgC;AACnC,QAAM1C,UAAU,CAACI,eAAe,CAACuC,mBAAjB,EAAsCf,gBAAtC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUgB,kBAAV,GAA+B;AAClC,QAAM5C,UAAU,CAACI,eAAe,CAACyC,kBAAjB,EAAqCb,eAArC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUc,kBAAV,GAA+B;AAClC,QAAM9C,UAAU,CAACI,eAAe,CAAC2C,kBAAjB,EAAqCX,mBAArC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUY,SAAV,GAAsB;AACzB,QAAMhD,UAAU,CAACI,eAAe,CAAC6C,cAAjB,EAAiCZ,OAAjC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUa,QAAV,GAAqB;AACxB,QAAMlD,UAAU,CAACI,eAAe,CAAC+C,aAAjB,EAAgCb,MAAhC,CAAhB;AACH;AAAA;AAED,OAAO,UAAUc,eAAV,GAA4B;AAC/B,QAAMpD,UAAU,CAACI,eAAe,CAACiD,eAAjB,EAAkCZ,cAAlC,CAAhB;AACH;AAED,OAAO,UAAUa,QAAV,GAAqB;AACxB,QAAMpD,GAAG,CAAC,CAACC,IAAI,CAACuC,mBAAD,CAAL,EAA4BvC,IAAI,CAACyC,kBAAD,CAAhC,EAAsDzC,IAAI,CAAC2C,kBAAD,CAA1D,EAAgF3C,IAAI,CAAC6C,SAAD,CAApF,EAAiG7C,IAAI,CAAC+C,QAAD,CAArG,EAAiH/C,IAAI,CAACiD,eAAD,CAArH,CAAD,CAAT;AACH;AAAA","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport { googleSigninSuccess, googleSigninFailure, emailSigninSuccess, emailSigninFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\r\n\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\n\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n    yield console.log(userAuth.email);\r\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n    const userSnapshot = yield userRef.get();\r\n    yield put(googleSigninSuccess({ id: userSnapshot.id, ...userSnapshot.data()}))\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch(error) {\r\n        yield put(googleSigninFailure(error));\r\n    }\r\n};\r\n\r\nexport function* signInWithEmail({ payload: { email, password }}) {\r\n    try {\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch(error) {\r\n        yield put(emailSigninFailure(error));\r\n    }\r\n}\r\n\r\nexport function* isUserAuthenticated() {\r\n    try{\r\n        const userAuth = yield getCurrentUser();\r\n        if (!userAuth) return;\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    } catch(error) {\r\n        yield put(emailSigninFailure(error));\r\n    }\r\n};\r\n\r\nexport function* signOut() {\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess())\r\n    } catch(error) {\r\n        yield put(signOutFailure(error))\r\n    }\r\n};\r\n\r\nexport function* signUp({ payload: { email, password, displayName }}) {\r\n    try {\r\n        const user = yield auth.createUserWithEmailAndPassword(email, password);\r\n        yield put(signUpSuccess({ user, additionalData: { displayName }}));\r\n    } catch(error) {\r\n        yield put(signUpFailure(error))\r\n    }\r\n};\r\n\r\nexport function* signInOnSignUp({ payload: { user, additionalData }}) {\r\n    yield console.log(user, additionalData);\r\n    yield getSnapshotFromUserAuth(user, additionalData)\r\n}\r\n\r\nexport function* onGoogleSigninStart() {\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGNIN_START, signInWithGoogle)\r\n};\r\n\r\nexport function* onEmailSigninStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGNIN_START, signInWithEmail)\r\n};\r\n\r\nexport function* onCheckUserSession() {\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n};\r\n\r\nexport function* onSignOut() {\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\r\n};\r\n\r\nexport function* onSignUp() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n};\r\n\r\nexport function* onSignUpSuccess() {\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInOnSignUp)\r\n}\r\n\r\nexport function* userSaga() {\r\n    yield all([call(onGoogleSigninStart), call(onEmailSigninStart), call(onCheckUserSession), call(onSignOut), call(onSignUp), call(onSignUpSuccess)]);\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}